@Library('lisk-jenkins') _

properties([
  parameters([
    string(name: 'SDK_BRANCH_NAME', defaultValue: 'development', description: 'Lisk core branch name', ),
    string(name: 'CORE_BRANCH_NAME', defaultValue: 'master', description: 'Lisk core branch name', ),
    string(name: 'NETWORK', defaultValue: 'jenkinsnet-$BUILD_ID', description: 'To Run test against a network', ),
    string(name: 'NODES_PER_REGION', defaultValue: '1', description: 'Number of nodes per region', ),
  ])
])

pipeline {
  agent { node { label 'lisk-core' } }
  options { disableConcurrentBuilds() }
  stages {
    stage('Build') {
      steps {
        dir('qa') {
          nvm(getNodejsVersion()) {
            sh 'npm ci'
          }
        }
      }
    }
    stage('Trigger core build') {
      steps {
        script {
          def b = build job: 'lisk-qa/lisk-core-build-dev',
                  parameters: [string(name: 'COMMITISH_SDK', value: """${params.SDK_BRANCH_NAME}"""),
                   string(name: 'COMMITISH_CORE', value: """${params.CORE_BRANCH_NAME}""")]
          env.LISK_VERSION = b.getBuildVariables().get('LISK_VERSION')
        }
      }
    }
    stage('Deploy network') {
      steps {
        retry(5) {
          ansiColor('xterm') {
            ansibleTower \
              towerServer: 'tower',
              templateType: 'job',
              jobTemplate: '14',  // devnet-deploy
              jobType: 'run',
              extraVars: """newrelic_enabled: '${params.NEWRELIC_ENABLED}'
devnet: ${params.NETWORK}
do_nodes_per_region: ${params.NODES_PER_REGION}
jenkins_ci: 'yes'
lisk_version: ${env.LISK_VERSION}""",
              importTowerLogs: true,
              throwExceptionWhenFail: true,
              verbose: false
          }
        }
      }
    }
  }
  post {
    failure {
      liskSlackSend('danger', "Build failed (<${env.BUILD_URL}/console|console>, <${env.BUILD_URL}/changes|changes>)", 'lisk-ci-core')
    }
  }
}
// vim: filetype=groovy
