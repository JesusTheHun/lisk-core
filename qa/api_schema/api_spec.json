{
	"swagger": "2.0",
	"info": {
		"title": "Lisk API documentation",
		"description": "# Welcome!\n\n## Access restrictions\nThe API endpoints are by default restricted to a whitelist of IPs that can be found under `modules.http_api.access.whiteList` in the config.\nIf it is required for your API to be accessible by the public, this can be achieved by changing `modules.http_api.access.public` to `true`.\nThis will allow anyone to make requests to your Lisk Core node.\nHowever some endpoints will stay private, hence this means that only a list of whitelisted IPs can successfully make API calls to that particular endpoint;\nthis includes all forging related API calls.\nBy default, only the nodes' local IP is also included in the whitelist, nevertheless it is possible to change the setting in `config` under `modules.http_api.forging.access.whiteList`.\nFor more details, see the [Lisk Core management docs](https://lisk.io/documentation/lisk-core/3.0.0/management/) or the descriptions at the respective endpoint below.\n\n## Requests\nChained filter parameters are logically connected with `AND`.\n`HTTP` is the supported URL schema by default.\nTo enable `HTTPS`, please adjust the `modules.http_api.ssl` section in the config.\n\n## Responses\nThe general response format is JSON (`application/json`).\nThe responses for each API request have a common basic structure as shown below:\n```javascript\n{\n    \"data\": {}, //Contains the requested data.\n    \"meta\": {}, //Contains additional metadata, e.g. the values of `limit` and `offset`.\n    \"links\": {} //Will contain links to connected API calls from here, e.g. pagination links.\n}\n```\n\n## Date formats\nMost of the timestamp parameters are in the Lisk timestamp format, which is similar to the Unix timestamp format.\nThe **Lisk timestamp** is the number of seconds that have elapsed since the Lisk epoch time (2016-05-24T17:00:00.000Z), not counting leap seconds.\nThe **Lisk epoch time** is returned in the [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format, combined with the date and time: `YYYY-MM-DDThh:mm:ssZ`.\nFor details, see the descriptions and examples at the respective endpoint.\n\n## Pagination\nIt is possible to easily paginate through the results by providing `limit` and `offset` parameters to the requests.\n`limit` and `offset` can be found in the `meta`-object of the response of an API request.\nIf no limit and offset are provided they are set to 10 and 0 by default, which in turn will display the first 10 results.\n\n## List of endpoints\nAll possible API endpoints for Lisk Core are listed below.\nClick on an endpoint to show the descriptions, details and examples.\n",
		"version": "1.0.32",
		"contact": {
			"email": "admin@lisk.io"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0"
		}
	},
	"basePath": "/api",
	"tags": [
		{
			"name": "Accounts",
			"description": "Account related API endpoints."
		},
		{
			"name": "Blocks",
			"description": "Block related API endpoints."
		},
		{
			"name": "Dapps",
			"description": "Dapps related API endpoints."
		},
		{
			"name": "Delegates",
			"description": "Delegates related API endpoints."
		},
		{
			"name": "Node",
			"description": "Node related API endpoints."
		},
		{
			"name": "Peers",
			"description": "Peers related API endpoints."
		},
		{
			"name": "Transactions",
			"description": "Transactions related API endpoints."
		},
		{
			"name": "Voters",
			"description": "Votes related API endpoints."
		},
		{
			"name": "Votes",
			"description": "Votes related API endpoints."
		}
	],
	"schemes": ["http", "https"],
	"paths": {
		"/accounts": {
			"x-swagger-router-controller": "accounts",
			"get": {
				"tags": ["Accounts"],
				"summary": "Requests account data",
				"operationId": "getAccounts",
				"description": "Search for matching accounts in the system.",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/address"
					},
					{
						"$ref": "#/parameters/publicKey"
					},
					{
						"$ref": "#/parameters/username"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": ["balance:asc", "balance:desc"],
						"default": "balance:asc"
					}
				],
				"responses": {
					"200": {
						"description": "List of accounts.",
						"schema": {
							"$ref": "#/definitions/AccountsResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/dapps": {
			"x-swagger-router-controller": "dapps",
			"get": {
				"tags": ["Dapps"],
				"summary": "Requests dapps data",
				"operationId": "getDapps",
				"description": "Search for a specified dapp in the system.",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "transactionId",
						"in": "query",
						"description": "Dapp registration transaction ID.",
						"required": false,
						"type": "string",
						"format": "id",
						"minLength": 1,
						"maxLength": 20
					},
					{
						"name": "name",
						"in": "query",
						"description": "Name to query - Fuzzy search.",
						"type": "string",
						"minLength": 1,
						"maxLength": 32
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": ["name:asc", "name:desc"],
						"default": "name:asc"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/offset"
					}
				],
				"responses": {
					"200": {
						"description": "Search results matching criteria.",
						"schema": {
							"$ref": "#/definitions/DappsResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/peers": {
			"x-swagger-router-controller": "peers",
			"get": {
				"tags": ["Peers"],
				"summary": "Requests peers data",
				"operationId": "getPeers",
				"description": "Search for specified peers.",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/ip"
					},
					{
						"$ref": "#/parameters/httpPort"
					},
					{
						"$ref": "#/parameters/wsPort"
					},
					{
						"$ref": "#/parameters/os"
					},
					{
						"$ref": "#/parameters/version"
					},
					{
						"$ref": "#/parameters/protocolVersion"
					},
					{
						"$ref": "#/parameters/state"
					},
					{
						"$ref": "#/parameters/height"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": [
							"height:asc",
							"height:desc",
							"version:asc",
							"version:desc"
						],
						"default": "height:desc"
					}
				],
				"responses": {
					"200": {
						"description": "List of peers.",
						"schema": {
							"$ref": "#/definitions/PeersResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/node/constants": {
			"x-swagger-router-controller": "node",
			"get": {
				"tags": ["Node"],
				"summary": "Requests constants data",
				"operationId": "getConstants",
				"description": "Returns all current constants data on the system, e.g. Lisk epoch time and version.",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Node constants response.",
						"schema": {
							"$ref": "#/definitions/NodeConstantsResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/node/status": {
			"x-swagger-router-controller": "node",
			"get": {
				"tags": ["Node"],
				"summary": "Requests status data",
				"operationId": "getStatus",
				"description": "Returns all current status data of the node, e.g. height.",
				"produces": ["application/json"],
				"responses": {
					"200": {
						"description": "Node status response.",
						"schema": {
							"$ref": "#/definitions/NodeStatusResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/node/status/forging": {
			"x-swagger-router-controller": "node",
			"get": {
				"tags": ["Node"],
				"summary": "Requests forging status of a delegate.",
				"operationId": "getForgingStatus",
				"description": "*Attention! This is a **private endpoint only authorized to whitelisted IPs.**\nTo edit the whitelist, please edit the `modules.http_api.forging.access.whiteList` section in the config. *<br>\nResponds with the forging status of a delegate on a node.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/publicKey"
					},
					{
						"$ref": "#/parameters/forging"
					}
				],
				"responses": {
					"200": {
						"description": "Search results matching criteria.",
						"schema": {
							"$ref": "#/definitions/ForgingStatusResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"403": {
						"description": "Access denied.",
						"schema": {
							"$ref": "#/definitions/AccessDeniedError"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			},
			"put": {
				"tags": ["Node"],
				"summary": "Toggles the forging status of a delegate.",
				"operationId": "updateForgingStatus",
				"description": "*Attention! This is a **private endpoint only authorized to whitelisted IPs.**\nTo edit the whitelist, please edit the `modules.http_api.forging.access.whiteList` section in the config. *<br>\nUpon passing the correct password and publicKey, forging will be enabled or disabled for the delegate of this particular node.\nThe password can be generated locally by encrypting your passphrase, either by using Lisk Commander or with Lisk Elements.\n",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "body",
						"name": "data",
						"description": "Password for decrypting passphrase of delegate with corresponding public key.",
						"required": true,
						"schema": {
							"type": "object",
							"required": ["password", "publicKey", "forging"],
							"properties": {
								"forging": {
									"type": "boolean",
									"example": true,
									"description": "Forging status of the delegate."
								},
								"password": {
									"type": "string",
									"example": "happy tree friends",
									"minLength": 5,
									"description": "Password for decrypting passphrase of delegate."
								},
								"publicKey": {
									"type": "string",
									"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
									"format": "publicKey",
									"description": "Public key of the delegate."
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Delegate forging toggled on or off.",
						"schema": {
							"$ref": "#/definitions/ForgingStatusResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"403": {
						"description": "Access denied.",
						"schema": {
							"$ref": "#/definitions/AccessDeniedError"
						}
					},
					"404": {
						"description": "Provided public key not found.",
						"schema": {
							"$ref": "#/definitions/NotFoundError"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/node/transactions": {
			"x-swagger-router-controller": "node",
			"get": {
				"tags": ["Node"],
				"summary": "Requests unprocessed transactions data.",
				"operationId": "getPooledTransactions",
				"description": "By specifying the state of the transactions, a list of unprocessed transactions matching this state can be seen.\nSearch for specific transactions by providing the appropriate parameters.\nIf a batch of transactions is posted, they will appear in the unprocessed list after a small delay depending on server load.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/transactionId"
					},
					{
						"$ref": "#/parameters/senderId"
					},
					{
						"$ref": "#/parameters/senderPublicKey"
					},
					{
						"$ref": "#/parameters/transactionType"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.`",
						"required": false,
						"type": "string",
						"enum": ["fee:asc", "fee:desc", "type:asc", "type:desc"],
						"default": "fee:desc"
					}
				],
				"responses": {
					"200": {
						"description": "Transactions list.",
						"schema": {
							"$ref": "#/definitions/TransactionsResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/delegates": {
			"x-swagger-router-controller": "delegates",
			"get": {
				"tags": ["Delegates"],
				"summary": "Requests delegates data.",
				"operationId": "getDelegates",
				"x-lisk-cache-enabled": true,
				"description": "Search for a specified delegate in the system.",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/address"
					},
					{
						"$ref": "#/parameters/publicKey"
					},
					{
						"$ref": "#/parameters/username"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Limit applied to results.",
						"type": "integer",
						"format": "int32",
						"minimum": 1,
						"maximum": 103,
						"default": 10
					},
					{
						"name": "search",
						"in": "query",
						"description": "Fuzzy delegate username to query.",
						"type": "string",
						"minLength": 1,
						"maxLength": 20
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": [
							"username:asc",
							"username:desc",
							"productivity:asc",
							"productivity:desc",
							"missedBlocks:asc",
							"missedBlocks:desc",
							"producedBlocks:asc",
							"producedBlocks:desc",
							"voteWeight:asc",
							"totalVotesReceived:desc"
						],
						"default": "totalVotesReceived:desc"
					}
				],
				"responses": {
					"200": {
						"description": "Search results matching criteria.",
						"schema": {
							"$ref": "#/definitions/DelegatesResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/delegates/forgers": {
			"x-swagger-router-controller": "delegates",
			"get": {
				"tags": ["Delegates"],
				"summary": "Requests next forgers data.",
				"operationId": "getForgers",
				"description": "Returns a list of the next forgers in this delegate round.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"name": "limit",
						"in": "query",
						"description": "Limit applied to results.",
						"type": "integer",
						"format": "int32",
						"minimum": 1,
						"maximum": 103,
						"default": 10
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Offset value for results.",
						"type": "integer",
						"format": "int32",
						"minimum": 0,
						"maximum": 100,
						"default": 0
					}
				],
				"responses": {
					"200": {
						"description": "Search results matching criteria.",
						"schema": {
							"$ref": "#/definitions/ForgersResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/delegates/{address}/forging_statistics": {
			"x-swagger-router-controller": "delegates",
			"get": {
				"tags": ["Delegates"],
				"summary": "Requests forging stats by delegate.",
				"operationId": "getForgingStatistics",
				"x-lisk-cache-enabled": true,
				"description": "By passing an existing delegate address and the desired unix timestamps, it is possible to acquire the forging statistics within the specified timespan.\nIf no timestamps are provided, the timestamps from Lisk epoch to the current date will be used.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"description": "Lisk address of a delegate.",
						"required": true,
						"type": "string",
						"format": "address"
					},
					{
						"$ref": "#/parameters/fromTimestamp"
					},
					{
						"$ref": "#/parameters/toTimestamp"
					}
				],
				"responses": {
					"200": {
						"description": "Results matching specified delegate address.",
						"schema": {
							"$ref": "#/definitions/ForgingStatsResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/blocks": {
			"x-swagger-router-controller": "blocks",
			"get": {
				"tags": ["Blocks"],
				"summary": "Requests blocks data",
				"operationId": "getBlocks",
				"x-lisk-cache-enabled": true,
				"description": "Search for a specified block in the system.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/blockId"
					},
					{
						"$ref": "#/parameters/height"
					},
					{
						"$ref": "#/parameters/fromTimestamp"
					},
					{
						"$ref": "#/parameters/toTimestamp"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"in": "query",
						"name": "generatorPublicKey",
						"description": "Public key of the forger of the block.",
						"type": "string",
						"format": "publicKey"
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": [
							"height:asc",
							"height:desc",
							"totalAmount:asc",
							"totalAmount:desc",
							"totalFee:asc",
							"totalFee:desc",
							"timestamp:asc",
							"timestamp:desc"
						],
						"default": "height:desc"
					}
				],
				"responses": {
					"200": {
						"description": "Search results matching criteria.",
						"schema": {
							"$ref": "#/definitions/BlocksResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/voters": {
			"x-swagger-router-controller": "voters",
			"get": {
				"tags": ["Voters"],
				"summary": "Requests voters data for a delegate.",
				"operationId": "getVoters",
				"description": "*Attention: At least **one of the filter parameters must be provided.***\nReturns all votes received by a delegate.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/username"
					},
					{
						"$ref": "#/parameters/address"
					},
					{
						"$ref": "#/parameters/publicKey"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": [
							"publicKey:asc",
							"publicKey:desc",
							"balance:asc",
							"balance:desc",
							"username:asc",
							"username:desc"
						],
						"default": "publicKey:asc"
					}
				],
				"responses": {
					"200": {
						"description": "Voters list.",
						"schema": {
							"$ref": "#/definitions/VotersResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"404": {
						"description": "Requested resource not found based on provided filters.",
						"schema": {
							"$ref": "#/definitions/NotFoundError"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/votes": {
			"x-swagger-router-controller": "voters",
			"get": {
				"tags": ["Votes"],
				"summary": "Requests votes data for an account.",
				"operationId": "getVotes",
				"description": "*Attention: At least **one of the filter parameters must be provided.***\nReturns all votes placed by an account.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/username"
					},
					{
						"$ref": "#/parameters/address"
					},
					{
						"$ref": "#/parameters/publicKey"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Limit applied to results.",
						"type": "integer",
						"format": "int32",
						"minimum": 1,
						"maximum": 10,
						"default": 10
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": [
							"username:asc",
							"username:desc",
							"balance:asc",
							"balance:desc"
						],
						"default": "username:asc"
					}
				],
				"responses": {
					"200": {
						"description": "Votes list.",
						"schema": {
							"$ref": "#/definitions/VotesResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"404": {
						"description": "Requested resource not found based on provided filters.",
						"schema": {
							"$ref": "#/definitions/NotFoundError"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			}
		},
		"/transactions": {
			"x-swagger-router-controller": "transactions",
			"get": {
				"tags": ["Transactions"],
				"summary": "Requests transactions data.",
				"operationId": "getTransactions",
				"x-lisk-cache-enabled": true,
				"description": "Search for a specified transaction in the system.\n",
				"produces": ["application/json"],
				"parameters": [
					{
						"$ref": "#/parameters/transactionId"
					},
					{
						"$ref": "#/parameters/recipientId"
					},
					{
						"$ref": "#/parameters/senderId"
					},
					{
						"$ref": "#/parameters/senderPublicKey"
					},
					{
						"$ref": "#/parameters/senderIdOrRecipientId"
					},
					{
						"$ref": "#/parameters/transactionType"
					},
					{
						"$ref": "#/parameters/height"
					},
					{
						"$ref": "#/parameters/minAmount"
					},
					{
						"$ref": "#/parameters/maxAmount"
					},
					{
						"$ref": "#/parameters/blockId"
					},
					{
						"$ref": "#/parameters/limit"
					},
					{
						"$ref": "#/parameters/offset"
					},
					{
						"in": "query",
						"name": "sort",
						"description": "Fields to sort results by.",
						"required": false,
						"type": "string",
						"enum": [
							"amount:asc",
							"amount:desc",
							"fee:asc",
							"fee:desc",
							"type:asc",
							"type:desc"
						],
						"default": "amount:asc"
					},
					{
						"name": "data",
						"in": "query",
						"description": "Fuzzy additional data field to query.",
						"type": "string",
						"format": "additionalData",
						"minLength": 1,
						"maxLength": 64
					}
				],
				"responses": {
					"200": {
						"description": "Transactions list.",
						"schema": {
							"$ref": "#/definitions/TransactionsResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					},
					"500": {
						"description": "Unexpected error.",
						"schema": {
							"$ref": "#/definitions/UnexpectedError"
						}
					}
				}
			},
			"post": {
				"tags": ["Transactions"],
				"summary": "Submits signed transaction for processing.",
				"operationId": "postTransaction",
				"description": "Submits signed transaction object for processing by the transaction pool.\nTransaction objects can be generated locally either by using Lisk Commander or with Lisk Elements.\n",
				"consumes": ["application/json"],
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "body",
						"name": "transaction",
						"description": "Transaction object to submit to the network.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TransactionRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Transaction accepted by the node for processing.",
						"schema": {
							"$ref": "#/definitions/GeneralStatusResponse"
						}
					},
					"400": {
						"description": "Malformed query or parameters.",
						"schema": {
							"$ref": "#/definitions/ParamErrorResponse"
						}
					},
					"409": {
						"description": "Some error related to processing of request.",
						"schema": {
							"$ref": "#/definitions/ProcessingError"
						}
					},
					"429": {
						"description": "Too many requests, exceeded rate limit.",
						"schema": {
							"$ref": "#/definitions/RequestLimitError"
						}
					}
				}
			}
		},
		"/spec": {
			"x-swagger-pipe": "swagger_raw_pipe"
		}
	},
	"parameters": {
		"ip": {
			"name": "ip",
			"in": "query",
			"description": "IP of the node or delegate.",
			"type": "string",
			"format": "ip"
		},
		"httpPort": {
			"name": "httpPort",
			"in": "query",
			"description": "Http port of the node or delegate.",
			"type": "integer",
			"format": "int32",
			"minimum": 1,
			"maximum": 65535
		},
		"wsPort": {
			"name": "wsPort",
			"in": "query",
			"description": "Web socket port for the node or delegate.",
			"type": "integer",
			"format": "int32",
			"minimum": 1,
			"maximum": 65535
		},
		"os": {
			"name": "os",
			"in": "query",
			"description": "OS of the node.",
			"type": "string"
		},
		"version": {
			"name": "version",
			"in": "query",
			"description": "Lisk version of the node.",
			"type": "string",
			"format": "version"
		},
		"protocolVersion": {
			"name": "protocolVersion",
			"in": "query",
			"description": "Protocol version of the node.",
			"type": "string",
			"format": "protocolVersion"
		},
		"state": {
			"name": "state",
			"in": "query",
			"description": "Current state of the network.",
			"type": "string",
			"enum": ["connected", "disconnected"]
		},
		"height": {
			"name": "height",
			"in": "query",
			"description": "Current height of the network.",
			"type": "integer",
			"format": "int32",
			"minimum": 1
		},
		"limit": {
			"in": "query",
			"name": "limit",
			"description": "Limit applied to results.",
			"type": "integer",
			"format": "int32",
			"minimum": 1,
			"maximum": 100,
			"default": 10
		},
		"offset": {
			"name": "offset",
			"in": "query",
			"description": "Offset value for results.",
			"type": "integer",
			"format": "int32",
			"minimum": 0,
			"default": 0
		},
		"address": {
			"name": "address",
			"in": "query",
			"description": "Address of an account.",
			"required": false,
			"type": "string",
			"format": "address",
			"minLength": 2,
			"maxLength": 22
		},
		"publicKey": {
			"name": "publicKey",
			"in": "query",
			"description": "Public key to query.",
			"type": "string",
			"format": "publicKey"
		},
		"username": {
			"name": "username",
			"in": "query",
			"description": "Delegate username to query.",
			"type": "string",
			"format": "username",
			"minLength": 1,
			"maxLength": 20
		},
		"blockId": {
			"name": "blockId",
			"in": "query",
			"description": "Block ID to query.",
			"type": "string",
			"format": "id",
			"minLength": 1,
			"maxLength": 20
		},
		"transactionId": {
			"name": "id",
			"in": "query",
			"description": "Transaction ID to query.",
			"type": "string",
			"format": "id",
			"minLength": 1,
			"maxLength": 20
		},
		"recipientId": {
			"name": "recipientId",
			"in": "query",
			"description": "Recipients Lisk address.",
			"type": "string",
			"format": "address",
			"minLength": 1,
			"maxLength": 22
		},
		"senderId": {
			"name": "senderId",
			"in": "query",
			"description": "Senders Lisk address.",
			"type": "string",
			"format": "address",
			"minLength": 1,
			"maxLength": 22
		},
		"senderPublicKey": {
			"name": "senderPublicKey",
			"in": "query",
			"description": "Senders public key.",
			"type": "string",
			"format": "publicKey",
			"minLength": 1
		},
		"senderIdOrRecipientId": {
			"name": "senderIdOrRecipientId",
			"in": "query",
			"description": "Lisk address.",
			"type": "string",
			"format": "address",
			"minLength": 1,
			"maxLength": 22
		},
		"transactionType": {
			"name": "type",
			"in": "query",
			"description": "Transaction type (0-*)",
			"type": "integer",
			"minimum": 0
		},
		"minAmount": {
			"name": "minAmount",
			"in": "query",
			"description": "Minimum transaction amount in Beddows.",
			"type": "integer",
			"minimum": 0
		},
		"maxAmount": {
			"name": "maxAmount",
			"in": "query",
			"description": "Maximum transaction amount in Beddows.",
			"type": "integer",
			"minimum": 0
		},
		"fromTimestamp": {
			"name": "fromTimestamp",
			"in": "query",
			"description": "Starting unix timestamp.",
			"type": "integer",
			"minimum": 0
		},
		"toTimestamp": {
			"name": "toTimestamp",
			"in": "query",
			"description": "Ending unix timestamp.",
			"type": "integer",
			"minimum": 1
		},
		"forging": {
			"name": "forging",
			"in": "query",
			"description": "Forging status to filter.",
			"type": "boolean"
		}
	},
	"definitions": {
		"Meta": {
			"type": "object",
			"required": ["limit", "offset"],
			"properties": {
				"limit": {
					"$ref": "#/definitions/Limit"
				},
				"offset": {
					"$ref": "#/definitions/Offset"
				}
			}
		},
		"Limit": {
			"description": "Limit applied to results.",
			"type": "integer",
			"format": "int32",
			"minimum": 1,
			"maximum": 100,
			"default": 10
		},
		"Offset": {
			"description": "Offset value for results.",
			"type": "integer",
			"format": "int32",
			"minimum": 0,
			"default": 0
		},
		"TransactionRequest": {
			"type": "object",
			"required": [
				"type",
				"senderPublicKey",
				"nonce",
				"fee",
				"asset",
				"signatures"
			],
			"properties": {
				"type": {
					"type": "integer",
					"minimum": 0,
					"description": "Describes the Transaction type.\n"
				},
				"nonce": {
					"type": "string",
					"example": "0",
					"description": "Unique sequence of number per account.\n"
				},
				"fee": {
					"type": "string",
					"example": "1000000",
					"description": "Fee for the transaction.\n"
				},
				"senderPublicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "2ca9a7143fc721fdc540fef893b27e8d648d2288efa61e56264edf01a2c23079",
					"description": "The public key of the Senders account.\n"
				},
				"signatures": {
					"type": "array",
					"description": "Derived from a SHA-256 hash of the transaction object, that is signed by the private key of the account who created the transaction.",
					"items": {
						"type": "string",
						"format": "signature",
						"example": "72c9b2aa734ec1b97549718ddf0d4737fd38a7f0fd105ea28486f2d989e9b3e399238d81a93aa45c27309d91ce604a5db9d25c9c90a138821f2011bc6636c60a"
					}
				},
				"asset": {
					"type": "object",
					"description": "Displays additional transaction data.\nFor example, this can include the vote data or delegate username.\n",
					"properties": {
						"amount": {
							"type": "string",
							"example": "150000000",
							"description": "Amount of Lisk to be transferred in this transaction.\n"
						},
						"recipientId": {
							"type": "string",
							"format": "address",
							"example": "12668885769632475474L",
							"description": "Lisk address of the recipients account.\n"
						}
					}
				}
			}
		},
		"NodeStatusResponse": {
			"type": "object",
			"required": ["data", "links", "meta"],
			"properties": {
				"data": {
					"$ref": "#/definitions/NodeStatus"
				},
				"meta": {
					"type": "object"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"NodeConstantsResponse": {
			"type": "object",
			"required": ["data", "links", "meta"],
			"properties": {
				"data": {
					"$ref": "#/definitions/NodeConstants"
				},
				"meta": {
					"type": "object"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"PeersResponse": {
			"description": "Peers response.",
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Peer"
					}
				},
				"meta": {
					"type": "object",
					"required": ["offset", "limit", "count"],
					"properties": {
						"offset": {
							"$ref": "#/definitions/Offset"
						},
						"limit": {
							"$ref": "#/definitions/Limit"
						},
						"count": {
							"description": "Number of peers in the response.",
							"type": "integer",
							"example": 100
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"AccountsResponse": {
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"description": "List of accounts.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AccountExtended"
					}
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"DappsResponse": {
			"description": "Dapps endpoint response.",
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Dapp"
					}
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"DelegatesResponse": {
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"description": "List of delegates.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DelegateWithAccount"
					}
				},
				"meta": {
					"type": "object",
					"required": ["limit", "offset"],
					"properties": {
						"offset": {
							"$ref": "#/definitions/Offset"
						},
						"limit": {
							"type": "integer",
							"format": "int32",
							"minimum": 1,
							"maximum": 103,
							"default": 10
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"ForgersResponse": {
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"description": "List of forgers.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Forger"
					}
				},
				"meta": {
					"type": "object",
					"required": [
						"offset",
						"limit",
						"currentSlot",
						"lastBlockSlot",
						"lastBlock"
					],
					"properties": {
						"offset": {
							"$ref": "#/definitions/Offset"
						},
						"limit": {
							"type": "integer",
							"format": "int32",
							"minimum": 1,
							"maximum": 103,
							"default": 10
						},
						"currentSlot": {
							"description": "Currently active slot.",
							"type": "integer",
							"example": 10
						},
						"lastBlockSlot": {
							"description": "Slot of the last processed block.",
							"type": "integer",
							"example": 10
						},
						"lastBlock": {
							"description": "ID of the last processed block.",
							"type": "integer",
							"example": 10
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"ForgingStatusResponse": {
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ForgingStatus"
					}
				},
				"meta": {
					"type": "object"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"ForgingStatsResponse": {
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"$ref": "#/definitions/ForgingStats"
				},
				"meta": {
					"type": "object",
					"required": ["fromTimestamp", "toTimestamp"],
					"properties": {
						"fromTimestamp": {
							"description": "Starting unix timestamp.",
							"type": "integer",
							"example": 0
						},
						"toTimestamp": {
							"description": "Ending unix timestamp.",
							"type": "integer",
							"example": 1525861914
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"BlocksResponse": {
			"description": "Blocks response.",
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Block"
					}
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"TransactionsResponse": {
			"description": "Transactions response.",
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Transaction"
					}
				},
				"meta": {
					"type": "object",
					"required": ["offset", "limit", "count"],
					"properties": {
						"offset": {
							"$ref": "#/definitions/Offset"
						},
						"limit": {
							"$ref": "#/definitions/Limit"
						},
						"count": {
							"description": "Number of transactions in the response.",
							"type": "integer",
							"example": 100
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"GeneralStatusResponse": {
			"type": "object",
			"required": ["data", "links", "meta"],
			"properties": {
				"data": {
					"type": "object",
					"required": ["message"],
					"properties": {
						"message": {
							"type": "string",
							"minLength": 1
						}
					}
				},
				"meta": {
					"type": "object",
					"required": ["status"],
					"properties": {
						"status": {
							"description": "Acceptance status for transactions.",
							"type": "boolean",
							"example": true
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"Transaction": {
			"type": "object",
			"required": [
				"id",
				"type",
				"fee",
				"senderPublicKey",
				"nonce",
				"asset",
				"signatures"
			],
			"properties": {
				"id": {
					"type": "string",
					"format": "id",
					"example": "222675625422353767",
					"minLength": 1,
					"maxLength": 20,
					"description": "Unique identifier of the transaction.\nDerived from the transaction signature.\n"
				},
				"fee": {
					"type": "string",
					"example": "1000000",
					"description": "Transaction fee associated with this transaction.\n"
				},
				"type": {
					"type": "integer",
					"minimum": 0,
					"description": "Describes the Transaction type.\n"
				},
				"height": {
					"type": "integer",
					"minimum": 1,
					"description": "The height of the network, at the exact point in time when this transaction was included in the blockchain.\n"
				},
				"blockId": {
					"type": "string",
					"format": "id",
					"minLength": 1,
					"maxLength": 20,
					"example": "6258354802676165798",
					"description": "The ID of the block which this transaction is included in.\n"
				},
				"nonce": {
					"type": "string",
					"example": "1",
					"description": "Unique sequence of number per account.\n"
				},
				"senderId": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "Lisk Address of the Senders account.\n"
				},
				"senderPublicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "2ca9a7143fc721fdc540fef893b27e8d648d2288efa61e56264edf01a2c23079",
					"description": "The public key of the Senders account.\n"
				},
				"signatures": {
					"type": "array",
					"items": {
						"type": "string",
						"format": "signature",
						"example": "72c9b2aa734ec1b97549718ddf0d4737fd38a7f0fd105ea28486f2d989e9b3e399238d81a93aa45c27309d91ce604a5db9d25c9c90a138821f2011bc6636c60a",
						"description": "Derived from a SHA-256 hash of the transaction object, that is signed by the private key of the account who created the transaction."
					}
				},
				"confirmations": {
					"type": "integer",
					"minimum": 0,
					"description": "Number of times that this transaction has been confirmed by the network.\nBy forging a new block on a chain, all former blocks and their contained transactions in the chain get confirmed by the forging delegate.\n"
				},
				"asset": {
					"type": "object"
				},
				"receivedAt": {
					"type": "string",
					"format": "date-time",
					"description": "The timestamp of the exact point in time where a node discovered a transaction for the first time."
				},
				"ready": {
					"type": "boolean",
					"example": false,
					"description": "Only present in transactions sent from a multisignature account, or transactions type 4 (multisignature registration).\nFalse, if the minimum amount of signatures to sign this transaction has not been reached yet.\nTrue, if the minimum amount of signatures has been reached.\n"
				}
			}
		},
		"Block": {
			"type": "object",
			"required": [
				"id",
				"height",
				"timestamp",
				"generatorPublicKey",
				"numberOfTransactions",
				"totalAmount",
				"totalFee",
				"reward",
				"totalForged"
			],
			"properties": {
				"id": {
					"type": "string",
					"format": "id",
					"minLength": 1,
					"maxLength": 20,
					"example": "6258354802676165798",
					"description": "Unique identifier of the block.\nDerived from the block signature.\n"
				},
				"version": {
					"type": "integer",
					"example": 0,
					"minimum": 0,
					"description": "Versioning for future upgrades of the Lisk protocol."
				},
				"height": {
					"type": "integer",
					"example": 123,
					"minimum": 1,
					"description": "Height of the network, when the block was forged.\nThe height of the network represents the number of blocks\nthat have been forged on the network since the genesis block.\n"
				},
				"timestamp": {
					"type": "integer",
					"example": 28227090,
					"description": "Unix timestamp."
				},
				"generatorAddress": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "Lisk address of the delegate who forged the block."
				},
				"generatorPublicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
					"description": "Public key of the delegate who forged the block."
				},
				"payloadLength": {
					"type": "integer",
					"example": 117,
					"minimum": 0,
					"description": "Bytesize of the payload hash."
				},
				"payloadHash": {
					"type": "string",
					"format": "hex",
					"example": "4e4d91be041e09a2e54bb7dd38f1f2a02ee7432ec9f169ba63cd1f193a733dd2",
					"description": "Hash of the payload of the block.\nThe payload of a block is comprised of the transactions that the block contains.\nFor each type of transaction there is a different maximum size which exists for the payload.\n"
				},
				"blockSignature": {
					"type": "string",
					"format": "signature",
					"example": "a3733254aad600fa787d6223002278c3400be5e8ed4763ae27f9a15b80e20c22ac9259dc926f4f4cabdf0e4f8cec49308fa8296d71c288f56b9d1e11dfe81e07",
					"description": "Derived from a SHA-256 hash of the block header,\nthat is signed by the private key of the delegate who forged the block.\n"
				},
				"confirmations": {
					"type": "integer",
					"example": 200,
					"description": "Number of times that this block has been confirmed by the network.\nBy forging a new block on a chain, all former blocks in the chain are then confirmed by the forging delegate.\n"
				},
				"previousBlockId": {
					"type": "string",
					"format": "id",
					"example": "15918760246746894806",
					"description": "The ID of the previous block of the chain."
				},
				"numberOfTransactions": {
					"type": "integer",
					"example": 15,
					"description": "The number of transactions processed in the block."
				},
				"totalAmount": {
					"type": "string",
					"example": "150000000",
					"description": "The total amount of Lisk transferred."
				},
				"totalFee": {
					"type": "string",
					"example": "15000000",
					"description": "The total amount of fees associated with the block."
				},
				"reward": {
					"type": "string",
					"example": "50000000",
					"description": "The Lisk reward for the delegate."
				},
				"totalForged": {
					"type": "string",
					"example": "65000000",
					"description": "Total amount of LSK that has been forged in this block.\nConsists of fees and the reward.\n"
				},
				"maxHeightPreviouslyForged": {
					"type": "integer",
					"example": 123,
					"description": "Largest height of any block previously forged by the generatorPublicKey as defined in the Lisk BFT Protocol.\nSee https://github.com/LiskHQ/lips/blob/master/proposals/lip-0014.md\n"
				},
				"maxHeightPrevoted": {
					"type": "integer",
					"example": 123,
					"description": "Largest height of an ancestor block with at least 68 prevotes as defined in the Lisk BFT Protocol.\nSee https://github.com/LiskHQ/lips/blob/master/proposals/lip-0014.md\n"
				}
			}
		},
		"ForgingStatus": {
			"type": "object",
			"required": ["forging", "publicKey"],
			"properties": {
				"forging": {
					"type": "boolean",
					"example": true,
					"description": "True if the delegate enabled forging."
				},
				"publicKey": {
					"type": "string",
					"example": "2ca9a7143fc721fdc540fef893b27e8d648d2288efa61e56264edf01a2c23079",
					"format": "publicKey",
					"description": "Public key of the queried delegate."
				}
			}
		},
		"VotersResponse": {
			"description": "Voters endpoint response.",
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"$ref": "#/definitions/DelegateWithVoters"
				},
				"meta": {
					"$ref": "#/definitions/Meta"
				},
				"links": {
					"type": "object"
				}
			}
		},
		"VotesResponse": {
			"description": "Votes endpoint response.",
			"type": "object",
			"required": ["data", "meta", "links"],
			"properties": {
				"data": {
					"$ref": "#/definitions/AccountWithVotes"
				},
				"meta": {
					"type": "object",
					"required": ["offset", "limit"],
					"properties": {
						"offset": {
							"$ref": "#/definitions/Offset"
						},
						"limit": {
							"type": "integer",
							"format": "int32",
							"minimum": 1,
							"maximum": 10,
							"default": 10
						}
					}
				},
				"links": {
					"type": "object"
				}
			}
		},
		"Forger": {
			"type": "object",
			"required": ["username", "publicKey", "address", "nextSlot"],
			"properties": {
				"username": {
					"type": "string",
					"format": "username",
					"example": "isabella",
					"description": "The delegates username.\nA delegate chooses the username by registering a delegate on the Lisk network.\nIt is unique and cannot be changed later.\n"
				},
				"publicKey": {
					"type": "string",
					"example": "2ca9a7143fc721fdc540fef893b27e8d648d2288efa61e56264edf01a2c23079",
					"format": "publicKey",
					"description": "The public key is derived from the private key of the owner of the account.\nIt can be used to validate that the private key belongs to the owner, but not provide access to the owners private key.\n"
				},
				"address": {
					"type": "string",
					"format": "address",
					"example": "6251001604903637008L",
					"description": "The Lisk address is the human readable representation of the accounts owners public key.\nIt consists of 21 numbers followed by a capital 'L' at the end.\n"
				},
				"nextSlot": {
					"type": "number",
					"example": 4368793,
					"description": "Returns the slot number in which the forger will be able to forge the next block.\nEach slot has a timespan of 10 seconds.\nThe first slot began directly after the Lisk epoch time.\n"
				}
			}
		},
		"ForgingStats": {
			"type": "object",
			"required": ["fees", "rewards", "forged", "count"],
			"properties": {
				"fees": {
					"type": "string",
					"example": "15000000",
					"description": "Amount of fees that the delegate earned during the timespan."
				},
				"rewards": {
					"type": "string",
					"example": "50000000",
					"description": "Amount of rewards that the delegate earned during the timespan."
				},
				"forged": {
					"type": "string",
					"example": "65000000",
					"description": "Amount of Lisk that has been transferred inside the forged blocks of a delegate, during the timespan."
				},
				"count": {
					"type": "string",
					"example": "100",
					"description": "Amount of blocks that the delegate has forged during the timespan."
				}
			}
		},
		"Dapp": {
			"type": "object",
			"required": ["transactionId", "name", "type"],
			"properties": {
				"transactionId": {
					"type": "string",
					"format": "id",
					"example": "15359945250124697273",
					"minLength": 1,
					"maxLength": 20,
					"description": "Unique identifier of the Register Dapp Transaction.\nDerived from the transaction signature.\n"
				},
				"icon": {
					"type": "string",
					"example": "http://www.blocksafefoundation.com/header.jpg",
					"description": "Dapp icon.\nA link to the icon can be provided in the Register Dapp Transaction object.\n"
				},
				"category": {
					"type": "number",
					"example": 8,
					"description": "The category of the Dapp."
				},
				"type": {
					"type": "number",
					"example": 8,
					"description": "The type of the Dapp."
				},
				"link": {
					"type": "string",
					"example": "https://github.com/blocksafe/SDK-notice/archive/master.zip"
				},
				"tags": {
					"type": "string",
					"example": "Smartgun",
					"description": "Tags of the Dapp."
				},
				"description": {
					"type": "string",
					"example": "Smart Gun Network",
					"description": "Description of the Dapp."
				},
				"name": {
					"type": "string",
					"example": "Blocksafe",
					"description": "Name of the Dapp."
				}
			}
		},
		"Peer": {
			"type": "object",
			"required": ["wsPort", "state"],
			"properties": {
				"ip": {
					"type": "string",
					"example": "127.0.0.1",
					"format": "ip",
					"description": "IPv4 address of the peer node."
				},
				"networkId": {
					"type": "string",
					"example": "93d00fe5be70d90e7ae247936a2e7d83b50809c79b73fa14285f02c842348b3e",
					"description": "The network identifier as per LIP-0009."
				},
				"httpPort": {
					"type": "integer",
					"example": 8000,
					"format": "int32",
					"minimum": 1,
					"maximum": 65535,
					"description": "The port the peer node uses for HTTP requests, e.g. API calls."
				},
				"wsPort": {
					"type": "integer",
					"example": 8001,
					"format": "int32",
					"minimum": 1,
					"maximum": 65535,
					"description": "The port the peer node uses for websocket connections, e.g. P2P broadcasts."
				},
				"os": {
					"type": "string",
					"example": "debian",
					"description": "The operating system that the peer node runs on."
				},
				"version": {
					"type": "string",
					"example": "v0.8.0",
					"format": "version",
					"description": "The version of Lisk Core that the peer node runs on."
				},
				"protocolVersion": {
					"type": "string",
					"example": 1,
					"format": "protocolVersion",
					"description": "The protocol version of Lisk Core that the peer node runs on."
				},
				"state": {
					"type": "string",
					"example": "connected",
					"enum": ["connected", "disconnected"],
					"description": "The state of the peer.\n"
				},
				"height": {
					"type": "integer",
					"example": 123,
					"description": "Network height on the peer node.\nRepresents the current number of blocks in the chain on the peer node.\n"
				}
			}
		},
		"NodeConstants": {
			"type": "object",
			"required": [
				"epoch",
				"milestone",
				"networkId",
				"reward",
				"supply",
				"build",
				"commit",
				"version"
			],
			"properties": {
				"epoch": {
					"type": "string",
					"format": "date-time",
					"example": "2016-05-24T17:00:00.000Z",
					"description": "Timestamp of first block on the network."
				},
				"milestone": {
					"type": "string",
					"example": "500000000",
					"description": "The reward that each forger will receive for forging a block at the current slot.\nAfter a certain amount of slots, the reward will be reduced.\n"
				},
				"build": {
					"type": "string",
					"example": "v09:54:35 12/04/2017",
					"description": "The build number.\nConsists of `v` + the date and time of the build of the node.\n"
				},
				"commit": {
					"type": "string",
					"example": "7199d4b67c3575d5f99d1c29436a02977eeb01a7",
					"minLength": 40,
					"maxLength": 40,
					"description": "The last commit that was added to the codebase."
				},
				"version": {
					"type": "string",
					"format": "version",
					"example": "v0.8.0",
					"description": "The Lisk Core version that the node is running on."
				},
				"protocolVersion": {
					"type": "string",
					"format": "protocolVersion",
					"example": 1,
					"description": "The Lisk Core protocol version that the node is running on."
				},
				"networkId": {
					"type": "string",
					"example": "ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511",
					"description": "Unique identifier for the network.\nThe networkId that the node is connecting to, see LIP-0009 for more details.\n"
				},
				"supply": {
					"type": "string",
					"example": "10575384500000000",
					"description": "Total supply of LSK in the network."
				},
				"reward": {
					"type": "string",
					"example": "500000000",
					"description": "The reward a delegate will receive for forging a block.\nDepends on the slot height.\n"
				}
			}
		},
		"NodeStatus": {
			"type": "object",
			"required": [
				"currentTime",
				"height",
				"chainMaxHeightFinalized",
				"secondsSinceEpoch",
				"syncing",
				"unconfirmedTransactions"
			],
			"properties": {
				"currentTime": {
					"type": "integer",
					"example": 1533558858128,
					"description": "Current time of the node in milliseconds (Unix timestamp)."
				},
				"height": {
					"type": "integer",
					"example": 123,
					"minimum": 1,
					"description": "Current block height of the node.\nRepresents the current number of blocks in the chain on the node.\n"
				},
				"chainMaxHeightFinalized": {
					"type": "integer",
					"example": 123,
					"description": "The largest height with precommits by at least 68 delegates.\nSee https://github.com/LiskHQ/lips/blob/master/proposals/lip-0014.md\n"
				},
				"secondsSinceEpoch": {
					"type": "integer",
					"example": 1533558858,
					"description": "Number of seconds that have elapsed since the Lisk epoch time (Lisk timestamp)."
				},
				"syncing": {
					"type": "boolean",
					"example": false,
					"description": "True if the node is syncing with other peers."
				},
				"unconfirmedTransactions": {
					"type": "integer",
					"example": 1,
					"minimum": 0,
					"description": "Number of unprocessed transactions in the pool.\n"
				}
			}
		},
		"TransactionError": {
			"type": "object",
			"required": ["message", "id", "dataPath"],
			"properties": {
				"message": {
					"description": "Error message.",
					"type": "string"
				},
				"name": {
					"description": "Type of Error.",
					"type": "string"
				},
				"id": {
					"description": "Transaction ID.",
					"type": "string",
					"minLength": 1
				},
				"dataPath": {
					"description": "Transaction field with error.",
					"type": "string"
				},
				"expected": {
					"description": "Expected value.",
					"type": ["string", "number"]
				},
				"actual": {
					"description": "Actual value.",
					"type": ["string", "number"]
				}
			}
		},
		"ProcessingError": {
			"type": "object",
			"required": ["message"],
			"properties": {
				"message": {
					"description": "Error message containing details of the error.",
					"type": "string",
					"minLength": 1
				},
				"code": {
					"description": "Error code containing details on status.",
					"type": "integer"
				},
				"errors": {
					"description": "Array containing TransactionError objects.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/TransactionError"
					}
				}
			}
		},
		"NotFoundError": {
			"type": "object",
			"required": ["message"],
			"properties": {
				"message": {
					"description": "Error message containing details of the error.",
					"type": "string",
					"minLength": 1
				}
			}
		},
		"AccessDeniedError": {
			"type": "object",
			"required": ["message"],
			"properties": {
				"message": {
					"description": "Error message containing details of the error.",
					"type": "string",
					"minLength": 1
				}
			}
		},
		"UnexpectedError": {
			"type": "object",
			"required": ["message"],
			"properties": {
				"message": {
					"description": "Error message containing details of the error.",
					"type": "string",
					"minLength": 1
				}
			}
		},
		"RequestLimitError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Request limit exceeded. Please try again later."
				}
			}
		},
		"ParamErrorResponse": {
			"type": "object",
			"description": "Response generated in case of parameters validation.",
			"required": ["message", "errors"],
			"properties": {
				"message": {
					"type": "string",
					"description": "Message stating a validation error occurred.",
					"example": "Validation errors."
				},
				"errors": {
					"type": "array",
					"description": "Array of individual parameter errors.",
					"items": {
						"$ref": "#/definitions/ParamError"
					}
				}
			}
		},
		"ParamError": {
			"type": "object",
			"description": "Collection of errors in a particular parameter.",
			"required": ["code", "name", "message"],
			"properties": {
				"code": {
					"type": "string",
					"description": "Valid error code explaining error.",
					"example": "INVALID_REQUEST_PARAMETER"
				},
				"name": {
					"type": "string",
					"description": "Parameter name for which error was triggered.",
					"example": "offset"
				},
				"in": {
					"type": "string",
					"description": "Where the param was specified, e.g. path, query, form-data.",
					"example": "query"
				},
				"message": {
					"type": "string",
					"description": "Detailed message explaining the error.",
					"example": "Invalid parameter (offset), value failed JSON schema validation."
				},
				"errors": {
					"type": "array",
					"description": "Array of individual validation error for a particular param.",
					"items": {
						"$ref": "#/definitions/ParamErrorMessage"
					}
				}
			}
		},
		"ParamErrorMessage": {
			"type": "object",
			"description": "Singular error detail for a parameter.",
			"required": ["message"],
			"properties": {
				"code": {
					"type": "string",
					"description": "Valid error code explaining error.",
					"example": "MINIMUM"
				},
				"message": {
					"type": "string",
					"description": "Detailed message explaining error.",
					"example": "Value -1 is less than minimum 0"
				},
				"description": {
					"type": "string",
					"description": "Param description specified in schema."
				},
				"path": {
					"type": "array",
					"description": "The array/object paths which identify the param associated with the error.",
					"items": {
						"type": "string",
						"example": "publicKey"
					}
				}
			}
		},
		"Account": {
			"type": "object",
			"required": ["address", "publicKey"],
			"properties": {
				"address": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "The Lisk address is the human readable representation of the accounts owners public key.\nIt consists of multiple numbers followed by a capital 'L' at the end.\n"
				},
				"publicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
					"description": "The public key is derived from the private key of the owner of the account.\nIt can be used to validate that the private key belongs to the owner, but not provide access to the owners private key.\n"
				}
			}
		},
		"AccountExtended": {
			"type": "object",
			"required": [
				"address",
				"publicKey",
				"balance",
				"nonce",
				"votes",
				"delegate",
				"unlocking"
			],
			"properties": {
				"address": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "The Lisk address is the human readable representation of the accounts owners public key.\nIt consists of 21 numbers followed by a capital 'L' at the end.\n"
				},
				"publicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
					"description": "The public key is derived from the private key of the owner of the account.\nIt can be used to validate that the private key belongs to the owner, but does not provide access to the owners private key.\n"
				},
				"balance": {
					"type": "string",
					"example": 1081560729258,
					"description": "The current balance of the account in Beddows."
				},
				"nonce": {
					"type": "string",
					"example": 154,
					"description": "The current nonce associated to account for transaction processing."
				},
				"asset": {
					"type": "object",
					"example": {
						"custom": true,
						"field": true
					},
					"description": "Any JSON stored in the account's asset field."
				},
				"votes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Vote"
					}
				},
				"delegate": {
					"$ref": "#/definitions/Delegate"
				},
				"isDelegate": {
					"type": "boolean",
					"description": "The value indicating if the account is a deleage or not."
				},
				"username": {
					"type": "string",
					"example": "onedelegate",
					"description": "If the account is a delegate, it displays the username for it."
				},
				"unlocking": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Unlocking"
					}
				},
				"keys": {
					"$ref": "#/definitions/MultisignatureAsset"
				}
			}
		},
		"Delegate": {
			"type": "object",
			"required": ["username", "voteWeight"],
			"properties": {
				"username": {
					"type": "string",
					"example": "isabella",
					"format": "username",
					"description": "The delegates username.\nA delegate chooses the username by registering a delegate on the Lisk network.\nIt is unique and cannot be changed later.\n"
				},
				"voteWeight": {
					"type": "string",
					"example": 1081560729258,
					"description": "The voters weight of the delegate.\nRepresents the total amount of Lisk (in Beddows), that the delegates voters own.\nThe voters weight decides which rank the delegate gets in relation to the other delegates and their voters weights.\n"
				},
				"rewards": {
					"type": "string",
					"example": 510000000,
					"description": "Total sum of block rewards that the delegate has forged."
				},
				"producedBlocks": {
					"type": "integer",
					"example": 20131,
					"description": "Total number of blocks that the delegate has forged."
				},
				"missedBlocks": {
					"type": "integer",
					"example": 427,
					"description": "Total number of blocks that the delegate has missed."
				},
				"approval": {
					"type": "number",
					"example": 14.22,
					"description": "Percentage of the voters weight that the delegate owns in relation to the total supply of Lisk."
				},
				"productivity": {
					"type": "number",
					"example": 96.41,
					"description": "Productivity rate.\nPercentage of successfully forged blocks (not missed), by the delegate.\n"
				}
			}
		},
		"DelegateWithAccount": {
			"type": "object",
			"required": ["username", "totalVotesReceived"],
			"properties": {
				"username": {
					"type": "string",
					"example": "isabella",
					"format": "username",
					"description": "The delegates username.\nA delegate chooses the username by registering a delegate on the Lisk network.\nIt is unique and cannot be changed later.\n"
				},
				"totalVotesReceived": {
					"type": "string",
					"example": 1081560729258,
					"description": "The total votes received by the delegate.\nRepresents the total amount of Lisk (in Beddows), that the delegates voters voted this delegate.\n"
				},
				"rewards": {
					"type": "string",
					"example": 510000000,
					"description": "Total sum of block rewards that the delegate has forged."
				},
				"producedBlocks": {
					"type": "integer",
					"example": 20131,
					"description": "Total number of blocks that the delegate has forged."
				},
				"missedBlocks": {
					"type": "integer",
					"example": 427,
					"description": "Total number of blocks that the delegate has missed."
				},
				"productivity": {
					"type": "number",
					"example": 96.41,
					"description": "Productivity rate.\nPercentage of successfully forged blocks (not missed), by the delegate.\n"
				},
				"address": {
					"type": "string",
					"example": "10016685355739180605L",
					"description": "The LISK address for the delegate."
				},
				"publicKey": {
					"type": "string",
					"example": "c678d19210ebf71914652d6644da5ee42e0c80948c4b520dba9f3d4514b213b2",
					"description": "The public key for the delegate."
				},
				"balance": {
					"type": "string",
					"example": 7000000000,
					"description": "The LISK balance for the delegate."
				},
				"nonce": {
					"type": "string",
					"example": 154,
					"description": "The current nonce associated to account for transaction processing."
				},
				"asset": {
					"type": "object",
					"description": "The asset object for the account."
				},
				"keys": {
					"type": "object",
					"description": "Multisignature information for the account."
				},
				"votes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Vote"
					}
				},
				"delegate": {
					"type": "object",
					"description": "Delegate propertiees associated with the account."
				},
				"approval": {
					"type": "number",
					"example": 14.22,
					"description": "Percentage of the voters weight that the delegate owns in relation to the total supply of Lisk."
				},
				"unlocking": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Unlocking"
					}
				}
			}
		},
		"DelegateWithVoters": {
			"type": "object",
			"required": ["username", "address", "votes", "balance", "voters"],
			"properties": {
				"username": {
					"type": "string",
					"example": "isabella",
					"format": "username",
					"description": "The delegates username.\nA delegate chooses the username by registering a delegate on the Lisk network.\nIt is unique and cannot be changed later.\n"
				},
				"publicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
					"description": "The public key of the delegate."
				},
				"votes": {
					"type": "array",
					"description": "Accounts this delegate voted for.",
					"items": {
						"$ref": "#/definitions/Vote"
					}
				},
				"address": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "The Lisk address of a delegate."
				},
				"balance": {
					"type": "string",
					"example": 1081560729258,
					"description": "Account balance.\nAmount of Lisk the delegate account owns.\n"
				},
				"voters": {
					"type": "array",
					"description": "List of accounts that voted for the queried delegate.",
					"items": {
						"$ref": "#/definitions/Voter"
					}
				}
			}
		},
		"Voter": {
			"type": "object",
			"required": ["address", "publicKey", "votes"],
			"properties": {
				"address": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "The Lisk address of the account that voted for the queried delegate."
				},
				"publicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
					"description": "Public key of the account that voted for the queried delegate."
				},
				"votes": {
					"type": "array",
					"description": "All votes the voter for the queried delegate voted for.",
					"items": {
						"$ref": "#/definitions/Vote"
					}
				}
			}
		},
		"AccountWithVotes": {
			"type": "object",
			"required": ["username", "address", "votesAvailable", "balance", "votes"],
			"properties": {
				"address": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "The Lisk address of the queried account."
				},
				"balance": {
					"type": "string",
					"example": 1081560729258,
					"description": "The balance of the queried account."
				},
				"username": {
					"type": "string",
					"example": "isabella",
					"format": "username",
					"description": "Username of the account, if the queried account is a delegate."
				},
				"publicKey": {
					"type": "string",
					"format": "publicKey",
					"example": "968ba2fa993ea9dc27ed740da0daf49eddd740dbd7cb1cb4fc5db3a20baf341b",
					"description": "Public key of the queried account."
				},
				"votesAvailable": {
					"type": "integer",
					"example": 8,
					"description": "Number of votes that are available for the queried account.\nDerives from 101(max possible votes) - votesUsed(already used votes).\n"
				},
				"votes": {
					"type": "array",
					"description": "List of placed votes by the queried account.",
					"items": {
						"$ref": "#/definitions/VoteWithDelegateProperties"
					}
				}
			}
		},
		"Vote": {
			"type": "object",
			"required": ["delegateAddress", "amount"],
			"properties": {
				"delegateAddress": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "Lisk address of the delegate the queried account voted for."
				},
				"amount": {
					"type": "string",
					"example": 1000000000000,
					"description": "Amount the account voted the delegate for in multiples of 10 Lisk."
				}
			}
		},
		"VoteWithDelegateProperties": {
			"type": "object",
			"required": ["delegateAddress", "amount", "delegate"],
			"properties": {
				"delegateAddress": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "Lisk address of the delegate the queried account voted for."
				},
				"amount": {
					"type": "string",
					"example": 1000000000000,
					"description": "Amount the account voted the delegate for in multiples of 10 Lisk."
				},
				"delegate": {
					"type": "object",
					"description": "Delegate properties of the delegate for this vote."
				}
			}
		},
		"Unlocking": {
			"type": "object",
			"required": ["delegateAddress", "amount", "unvoteHeight"],
			"properties": {
				"delegateAddress": {
					"type": "string",
					"format": "address",
					"example": "12668885769632475474L",
					"description": "Lisk address of the delegate the queried account unvoted."
				},
				"amount": {
					"type": "string",
					"example": 1000000000000,
					"description": "Amount the account voted the delegate for in multiples of 10 Lisk."
				},
				"unvoteHeight": {
					"type": "number",
					"example": 50000,
					"description": "Height at which the unvote should be valid."
				}
			}
		},
		"MultisignatureAsset": {
			"type": "object",
			"properties": {
				"mandatoryKeys": {
					"type": "array",
					"description": "Mandatory multi-signature account members",
					"items": {
						"type": "string"
					}
				},
				"optionalKeys": {
					"type": "array",
					"description": "Optional multi-signature account members",
					"items": {
						"type": "string"
					}
				},
				"numberOfSignatures": {
					"type": "number",
					"description": "Number of required signatures"
				}
			}
		}
	}
}
